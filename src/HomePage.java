import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

import utils.ManageClients;
import utils.ManageTickets;
import utils.MyDefaultTableModel;
import utils.ReportsData;



public class HomePage extends javax.swing.JFrame {

    int selctedRow = -1;
    
    ArrayList<String[]> data = null;

    public HomePage() {
        showTicketScreen();
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    public void showTicketScreen() {
        System.out.println("show ticket screen");
        this.getContentPane().removeAll();
        this.jPanel1 = new javax.swing.JPanel();
        this.SearchCombo = new javax.swing.JComboBox<>();
        this.Search = new javax.swing.JTextField();
        this.Clear = new javax.swing.JButton();
        this.jLabel1 = new javax.swing.JLabel();
        this.jScrollPane1 = new javax.swing.JScrollPane();
        this.jTable1 = new javax.swing.JTable();
        this.Add = new javax.swing.JButton();
        this.Update = new javax.swing.JButton();
        this.Delete = new javax.swing.JButton();
        this.jMenuBar1 = new javax.swing.JMenuBar();
        this.Ticket = new javax.swing.JMenu();
        this.Client = new javax.swing.JMenu();
        this.Invoice = new javax.swing.JMenu();
        this.Reports = new javax.swing.JMenu();
        this.jMenuItem1 = new javax.swing.JMenuItem();
        this.jMenuItem2 = new javax.swing.JMenuItem();
        //this.jMenuItem3 = new javax.swing.JMenuItem();
        this.LogOut = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        this.jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        this.SearchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Client", "From", "To"}));

        this.Clear.setText("Clear");
        this.Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        this.jLabel1.setText("Employee List");

        String col[] = {"Ticket Id", "Client", "From", "To", "Status"};

        this.tableModel = new MyDefaultTableModel(col, 0);

        for (int i = 0; i < ManageTickets.data.size(); i++) {
            String id = ManageTickets.data.get(i)[0];
            Object obj[] = {ManageTickets.data.get(i)[0], ManageTickets.data.get(i)[1], ManageTickets.data.get(i)[2],
                ManageTickets.data.get(i)[6], ManageTickets.data.get(i)[12]};
            this.tableModel.addRow(obj);
        }

        this.jTable1.setModel(this.tableModel); // The 0 argument is number
                                                // rows.

        this.jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.jScrollPane1.setViewportView(this.jTable1);

        this.jTable1.addMouseListener(new MouseListener() {

            @Override
            public void mouseReleased(final MouseEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void mousePressed(final MouseEvent e) {
                System.out.println(HomePage.this.jTable1.getSelectedRow());
                HomePage.this.selctedRow = HomePage.this.jTable1.getSelectedRow();
                HomePage.this.Update.setEnabled(true);
                // Delete.setEnabled(true);

            }

            @Override
            public void mouseExited(final MouseEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void mouseEntered(final MouseEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void mouseClicked(final MouseEvent e) {
                // TODO Auto-generated method stub

            }
        });

        this.Add.setText("Add");
        this.Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                AddTicketActionPerformed(evt);
            }
        });

        this.Update.setText("Update");
        this.Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                UpdateTicketActionPerformed(evt);
            }
        });

        this.Delete.setText("Delete");
        this.Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DeleteTicketActionPerformed(evt);
            }
        });


        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(this.jPanel1);
        this.jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout
            .setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(this.Add, javax.swing.GroupLayout.PREFERRED_SIZE, 76,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(75, 75, 75)
                            .addComponent(this.Update, javax.swing.GroupLayout.PREFERRED_SIZE, 75,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)
                    .addComponent(this.Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(this.SearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 78,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(34, 34, 34)
                    .addComponent(this.Search, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.Clear))
                .addComponent(this.jLabel1).addComponent(this.jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375,
                    javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(this.SearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(this.Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(this.Clear))
                .addGap(18, 18, 18).addComponent(this.jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(this.jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354,
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(this.Add).addComponent(this.Update).addComponent(this.Delete))
                .addContainerGap(18, Short.MAX_VALUE)));

        this.Ticket.setText("Ticket");
        this.Ticket.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                System.out.println("ticket clicked");
                TicketMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });


        this.jMenuBar1.add(this.Ticket);

        this.Client.setText("Client");
        this.Client.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                System.out.println("client clicked");
                ClientMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });
        this.jMenuBar1.add(this.Client);

        this.Invoice.setText("Invoice");
        this.Invoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                InvoiceMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });
        this.jMenuBar1.add(this.Invoice);

        this.Reports.setText("Reports");

        this.jMenuItem1.setText("Bonus Report");
        this.jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {

            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        this.Reports.add(this.jMenuItem1);

        this.jMenuItem2.setText("Company Report");
        this.jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {

            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
        });
        this.Reports.add(this.jMenuItem2);

        /*this.jMenuItem3.setText("jMenuItem3");
        this.jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {

            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {
                jMenuItem3MousePressed(evt);
            }
        });
        this.Reports.add(this.jMenuItem3);*/

        this.jMenuBar1.add(this.Reports);

        this.LogOut.setText("LogOut");
        this.LogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                LogOutMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });
        this.jMenuBar1.add(this.LogOut);

        setJMenuBar(this.jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout
            .setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(this.jPanel1,
                    javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap()));
        layout
            .setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(this.jPanel1,
                    javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap()));


        this.Search.getDocument().addDocumentListener(new DocumentListener() {


            @Override
            public void removeUpdate(final DocumentEvent e) {
                System.out.println("removeUpdate");
                HomePage.this.tableModel = new MyDefaultTableModel(col, 0);
                for (int i = 0; i < ManageTickets.data.size(); i++) {

                    String id = ManageTickets.data.get(i)[0];
                    Object obj[] = {ManageTickets.data.get(i)[0], ManageTickets.data.get(i)[1], ManageTickets.data.get(i)[2],
                        ManageTickets.data.get(i)[6], ManageTickets.data.get(i)[12]};
                    System.out.println("SearchCombo.getSelectedItem(): " + HomePage.this.SearchCombo.getSelectedItem()
                        + " Search.getText():  " + HomePage.this.Search.getText());
                    if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("Client")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[1])
                            || ManageTickets.data.get(i)[1].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        System.out.println("inside ManageTickets.data.get(i)[1]) : " + ManageTickets.data.get(i)[1]);
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("From")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[2])
                            || ManageTickets.data.get(i)[2].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("To")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[6])
                            || ManageTickets.data.get(i)[6].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (HomePage.this.Search.getText().trim().equals("")) {
                        HomePage.this.tableModel.addRow(obj);
                    }

                }

                HomePage.this.jTable1.setModel(HomePage.this.tableModel);
                HomePage.this.jTable1.repaint();

            }

            @Override
            public void insertUpdate(final DocumentEvent e) {
                System.out.println("insertUpdate");


                HomePage.this.tableModel = new MyDefaultTableModel(col, 0);
                for (int i = 0; i < ManageTickets.data.size(); i++) {

                    String id = ManageTickets.data.get(i)[0];
                    Object obj[] = {ManageTickets.data.get(i)[0], ManageTickets.data.get(i)[1], ManageTickets.data.get(i)[2],
                        ManageTickets.data.get(i)[6], ManageTickets.data.get(i)[12]};
                    System.out.println("SearchCombo.getSelectedItem(): " + HomePage.this.SearchCombo.getSelectedItem()
                        + " Search.getText():  " + HomePage.this.Search.getText());
                    if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("Client")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[1])
                            || ManageTickets.data.get(i)[1].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        System.out.println("inside ManageTickets.data.get(i)[1]) : " + ManageTickets.data.get(i)[1]);
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("From")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[2])
                            || ManageTickets.data.get(i)[2].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("To")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[6])
                            || ManageTickets.data.get(i)[6].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (HomePage.this.Search.getText().trim().equals("")) {
                        HomePage.this.tableModel.addRow(obj);
                    }

                }

                HomePage.this.jTable1.setModel(HomePage.this.tableModel);
                HomePage.this.jTable1.repaint();


            }

            @Override
            public void changedUpdate(final DocumentEvent e) {
                System.out.println("changedUpdate");
                HomePage.this.tableModel = new MyDefaultTableModel(col, 0);
                for (int i = 0; i < ManageTickets.data.size(); i++) {

                    String id = ManageTickets.data.get(i)[0];
                    Object obj[] = {ManageTickets.data.get(i)[0], ManageTickets.data.get(i)[1], ManageTickets.data.get(i)[2],
                        ManageTickets.data.get(i)[6], ManageTickets.data.get(i)[12]};
                    System.out.println("SearchCombo.getSelectedItem(): " + HomePage.this.SearchCombo.getSelectedItem()
                        + " Search.getText():  " + HomePage.this.Search.getText());
                    if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("Client")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[1])
                            || ManageTickets.data.get(i)[1].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        System.out.println("inside ManageTickets.data.get(i)[1]) : " + ManageTickets.data.get(i)[1]);
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("From")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[2])
                            || ManageTickets.data.get(i)[2].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("To")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageTickets.data.get(i)[6])
                            || ManageTickets.data.get(i)[6].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (HomePage.this.Search.getText().trim().equals("")) {
                        HomePage.this.tableModel.addRow(obj);
                    }

                }

                HomePage.this.jTable1.setModel(HomePage.this.tableModel);
                HomePage.this.jTable1.repaint();

            }
        });
        this.Update.setEnabled(false);
        this.Delete.setEnabled(false);
        this.setVisible(true);
        pack();
    }

    void showClients() {
        System.out.println("show client screen");
        this.getContentPane().removeAll();
        this.jPanel1 = new javax.swing.JPanel();
        this.SearchCombo = new javax.swing.JComboBox<>();
        this.Search = new javax.swing.JTextField();
        this.Clear = new javax.swing.JButton();
        this.jLabel1 = new javax.swing.JLabel();
        this.jScrollPane1 = new javax.swing.JScrollPane();
        this.jTable1 = new javax.swing.JTable();
        this.Add = new javax.swing.JButton();
        this.Update = new javax.swing.JButton();
        this.Delete = new javax.swing.JButton();
        this.jMenuBar1 = new javax.swing.JMenuBar();
        this.Ticket = new javax.swing.JMenu();
        this.Client = new javax.swing.JMenu();
        this.Invoice = new javax.swing.JMenu();
        this.Reports = new javax.swing.JMenu();
        this.jMenuItem1 = new javax.swing.JMenuItem();
        this.jMenuItem2 = new javax.swing.JMenuItem();
        //this.jMenuItem3 = new javax.swing.JMenuItem();
        this.LogOut = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        this.jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        this.SearchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Id", "Name"}));

        this.Clear.setText("Clear");
        this.Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        this.jLabel1.setText("Client List");

        String col[] = {"Client Id", "Name", "Adress", "Status"};

        this.tableModel = new MyDefaultTableModel(col, 0);

        for (int i = 0; i < ManageClients.data.size(); i++) {
            String id = ManageClients.data.get(i)[0];
            Object obj[] = {
                ManageClients.data.get(i)[0], ManageClients.data.get(i)[1], ManageClients.data.get(i)[4] + " "
                    + ManageClients.data.get(i)[5] + " " + ManageClients.data.get(i)[6] + " " + ManageClients.data.get(i)[7],
                ManageClients.data.get(i)[8]};
            this.tableModel.addRow(obj);
        }

        this.jTable1.setModel(this.tableModel); // The 0 argument is number
                                                // rows.

        this.jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.jScrollPane1.setViewportView(this.jTable1);


        this.jTable1.addMouseListener(new MouseListener() {

            @Override
            public void mouseReleased(final MouseEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void mousePressed(final MouseEvent e) {
                System.out.println(HomePage.this.jTable1.getSelectedRow());
                HomePage.this.selctedRow = HomePage.this.jTable1.getSelectedRow();
                HomePage.this.Update.setEnabled(true);
                HomePage.this.Delete.setEnabled(true);

            }

            @Override
            public void mouseExited(final MouseEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void mouseEntered(final MouseEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void mouseClicked(final MouseEvent e) {
                // TODO Auto-generated method stub

            }
        });


        this.Add.setText("Add");
        this.Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                AddClientActionPerformed(evt);
            }
        });

        this.Update.setText("Update");
        this.Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                UpdateClientActionPerformed(evt);
            }
        });

        this.Delete.setText("Delete");
        this.Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DeleteClientActionPerformed(evt);
            }
        });

        this.Search.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void removeUpdate(final DocumentEvent e) {
                System.out.println("removeUpdate");
                HomePage.this.tableModel = new MyDefaultTableModel(col, 0);
                for (int i = 0; i < ManageClients.data.size(); i++) {

                    String id = ManageClients.data.get(i)[0];
                    Object obj[] = {ManageClients.data.get(i)[0], ManageClients.data.get(i)[1], ManageClients.data.get(i)[4] + " "
                        + ManageClients.data.get(i)[5] + " " + ManageClients.data.get(i)[6] + " " + ManageClients.data.get(i)[7],
                        ManageClients.data.get(i)[8]};
                    System.out.println("SearchCombo.getSelectedItem(): " + HomePage.this.SearchCombo.getSelectedItem()
                        + " Search.getText():  " + HomePage.this.Search.getText());
                    if (((String) HomePage.this.SearchCombo.getSelectedItem()).equals("Id")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageClients.data.get(i)[0])
                            || ManageClients.data.get(i)[0].contains(HomePage.this.Search.getText()))) {
                        System.out.println("inside ManageClients.data.get(i)[1]) : " + ManageClients.data.get(i)[1]);
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("Name")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageClients.data.get(i)[1])
                            || ManageClients.data.get(i)[1].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (HomePage.this.Search.getText().trim().equals("")) {
                        HomePage.this.tableModel.addRow(obj);
                    }

                }

                HomePage.this.jTable1.setModel(HomePage.this.tableModel);
                HomePage.this.jTable1.repaint();

            }

            @Override
            public void insertUpdate(final DocumentEvent e) {
                System.out.println("insertUpdate");


                HomePage.this.tableModel = new MyDefaultTableModel(col, 0);
                for (int i = 0; i < ManageClients.data.size(); i++) {

                    String id = ManageClients.data.get(i)[0];
                    Object obj[] = {ManageClients.data.get(i)[0], ManageClients.data.get(i)[1], ManageClients.data.get(i)[4] + " "
                        + ManageClients.data.get(i)[5] + " " + ManageClients.data.get(i)[6] + " " + ManageClients.data.get(i)[7],
                        ManageClients.data.get(i)[8]};
                    System.out.println("SearchCombo.getSelectedItem(): " + HomePage.this.SearchCombo.getSelectedItem()
                        + " Search.getText():  " + HomePage.this.Search.getText());
                    if (((String) HomePage.this.SearchCombo.getSelectedItem()).equals("Id")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageClients.data.get(i)[0])
                            || ManageClients.data.get(i)[0].contains(HomePage.this.Search.getText()))) {
                        System.out.println("inside ManageClients.data.get(i)[1]) : " + ManageClients.data.get(i)[1]);
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("Name")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageClients.data.get(i)[1])
                            || ManageClients.data.get(i)[1].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (HomePage.this.Search.getText().trim().equals("")) {
                        HomePage.this.tableModel.addRow(obj);
                    }

                }

                HomePage.this.jTable1.setModel(HomePage.this.tableModel);
                HomePage.this.jTable1.repaint();


            }

            @Override
            public void changedUpdate(final DocumentEvent e) {
                System.out.println("changedUpdate");
                HomePage.this.tableModel = new MyDefaultTableModel(col, 0);
                for (int i = 0; i < ManageClients.data.size(); i++) {

                    String id = ManageClients.data.get(i)[0];
                    Object obj[] = {ManageClients.data.get(i)[0], ManageClients.data.get(i)[1], ManageClients.data.get(i)[4] + " "
                        + ManageClients.data.get(i)[5] + " " + ManageClients.data.get(i)[6] + " " + ManageClients.data.get(i)[7],
                        ManageClients.data.get(i)[8]};
                    System.out.println("SearchCombo.getSelectedItem(): " + HomePage.this.SearchCombo.getSelectedItem()
                        + " Search.getText():  " + HomePage.this.Search.getText());
                    if (((String) HomePage.this.SearchCombo.getSelectedItem()).equals("Id")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageClients.data.get(i)[0])
                            || ManageClients.data.get(i)[0].contains(HomePage.this.Search.getText()))) {
                        System.out.println("inside ManageClients.data.get(i)[1]) : " + ManageClients.data.get(i)[1]);
                        HomePage.this.tableModel.addRow(obj);
                    } else if (((String) HomePage.this.SearchCombo.getSelectedItem()).equalsIgnoreCase("Name")
                        && (HomePage.this.Search.getText().equalsIgnoreCase(ManageClients.data.get(i)[1])
                            || ManageClients.data.get(i)[1].toLowerCase().contains(HomePage.this.Search.getText().toLowerCase()))) {
                        HomePage.this.tableModel.addRow(obj);
                    } else if (HomePage.this.Search.getText().trim().equals("")) {
                        HomePage.this.tableModel.addRow(obj);
                    }

                }

                HomePage.this.jTable1.setModel(HomePage.this.tableModel);
                HomePage.this.jTable1.repaint();

            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(this.jPanel1);
        this.jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout
            .setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(this.Add, javax.swing.GroupLayout.PREFERRED_SIZE, 76,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(75, 75, 75)
                            .addComponent(this.Update, javax.swing.GroupLayout.PREFERRED_SIZE, 75,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)
                    .addComponent(this.Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(this.SearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 78,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(34, 34, 34)
                    .addComponent(this.Search, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.Clear))
                .addComponent(this.jLabel1).addComponent(this.jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375,
                    javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(this.SearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(this.Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(this.Clear))
                .addGap(18, 18, 18).addComponent(this.jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(this.jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354,
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(this.Add).addComponent(this.Update).addComponent(this.Delete))
                .addContainerGap(18, Short.MAX_VALUE)));

        this.Ticket.setText("Ticket");
        this.Ticket.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                TicketMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });


        this.jMenuBar1.add(this.Ticket);

        this.Client.setText("Client");
        this.Client.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                ClientMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });
        this.jMenuBar1.add(this.Client);

        this.Invoice.setText("Invoice");
        this.Invoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                InvoiceMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });
        this.jMenuBar1.add(this.Invoice);

        this.Reports.setText("Reports");

        this.jMenuItem1.setText("Bonus Report");
        this.jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {

            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        this.Reports.add(this.jMenuItem1);

        this.jMenuItem2.setText("Company Report");
        this.jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {

            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
        });
        this.Reports.add(this.jMenuItem2);

        /*this.jMenuItem3.setText("jMenuItem3");
        this.jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {

            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {
                jMenuItem3MousePressed(evt);
            }
        });
        this.Reports.add(this.jMenuItem3);*/

        this.jMenuBar1.add(this.Reports);

        this.LogOut.setText("LogOut");
        this.LogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                LogOutMouseClicked(evt);
            }

            public void mousePressed(final java.awt.event.MouseEvent evt) {

            }
        });
        this.jMenuBar1.add(this.LogOut);

        setJMenuBar(this.jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout
            .setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(this.jPanel1,
                    javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap()));
        layout
            .setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(this.jPanel1,
                    javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap()));

        this.Update.setEnabled(false);
        this.Delete.setEnabled(false);
        this.setVisible(true);
    }
    
    public void showInvoice()
    {
    	 this.getContentPane().removeAll();
    	 jLabel1 = new javax.swing.JLabel();
         jLabel2 = new javax.swing.JLabel();
         fromDate = new javax.swing.JTextField();
         jLabel3 = new javax.swing.JLabel();
         toDate = new javax.swing.JTextField();
         get = new javax.swing.JButton();
         jScrollPane1 = new javax.swing.JScrollPane();
         jTable1 = new javax.swing.JTable();
         Open = new javax.swing.JButton();
         jMenuBar1 = new javax.swing.JMenuBar();
         Ticket = new javax.swing.JMenu();
         Client = new javax.swing.JMenu();
         Invoice = new javax.swing.JMenu();
         Reports = new javax.swing.JMenu();
         jMenuItem1 = new javax.swing.JMenuItem();
         jMenuItem2 = new javax.swing.JMenuItem();
         //jMenuItem3 = new javax.swing.JMenuItem();
         LogOut = new javax.swing.JMenu();

         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

         jLabel1.setText("Invoice Report");

         jLabel2.setText("From date");

         jLabel3.setText("To date");

         get.setText("Get");
         get.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 getActionPerformed(evt,fromDate.getText(),toDate.getText());
             }
         });

         String col[] = {"Invoice Id", "Client", "From", "To", "Cost"};
         
         Open.setText("Open");
         Open.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 OpenActionPerformed(evt);
             }
         });

         this.tableModel = new MyDefaultTableModel(col, 0);
         this.jTable1.setModel(this.tableModel);
         jScrollPane1.setViewportView(jTable1);
         
         this.jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

         Ticket.setText("Ticket");
         Ticket.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
                 TicketMouseClicked(evt);
             }
             public void mousePressed(java.awt.event.MouseEvent evt) {
                
             }
         });
         
         this.jTable1.addMouseListener(new MouseListener() {

             @Override
             public void mouseReleased(final MouseEvent e) {
                 // TODO Auto-generated method stub

             }

             @Override
             public void mousePressed(final MouseEvent e) {
                 System.out.println(HomePage.this.jTable1.getSelectedRow());
                 HomePage.this.selctedRow = HomePage.this.jTable1.getSelectedRow();
                 HomePage.this.Open.setEnabled(true);
                 // Delete.setEnabled(true);

             }

             @Override
             public void mouseExited(final MouseEvent e) {
                 // TODO Auto-generated method stub

             }

             @Override
             public void mouseEntered(final MouseEvent e) {
                 // TODO Auto-generated method stub

             }

             @Override
             public void mouseClicked(final MouseEvent e) {
                 // TODO Auto-generated method stub

             }
         });
  
      
         jMenuBar1.add(Ticket);

         Client.setText("Client");
         Client.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
                 ClientMouseClicked(evt);
             }
             public void mousePressed(java.awt.event.MouseEvent evt) {
                
             }
         });
         jMenuBar1.add(Client);

         Invoice.setText("Invoice");
         Invoice.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
                 InvoiceMouseClicked(evt);
             }
             public void mousePressed(java.awt.event.MouseEvent evt) {
                
             }
         });
         jMenuBar1.add(Invoice);

         Reports.setText("Reports");

         jMenuItem1.setText("Bonus Report");
         jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
                 //TicketMouseClicked(evt);
             }
             public void mousePressed(java.awt.event.MouseEvent evt) {
            	 jMenuItem1MousePressed(evt);
             }
         });
         Reports.add(jMenuItem1);

         jMenuItem2.setText("Company Report");
         jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
                 //TicketMouseClicked(evt);
             }
             public void mousePressed(java.awt.event.MouseEvent evt) {
            	 jMenuItem2MousePressed(evt);
             }
         });
         Reports.add(jMenuItem2);

        /* jMenuItem3.setText("jMenuItem3");
         jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
                 //TicketMouseClicked(evt);
             }
             public void mousePressed(java.awt.event.MouseEvent evt) {
                
             }
         });
         Reports.add(jMenuItem3);*/

         jMenuBar1.add(Reports);

         LogOut.setText("LogOut");
         LogOut.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
            	 LogOutMouseClicked(evt);
             }
             public void mousePressed(java.awt.event.MouseEvent evt) {
                
             }
         });
         jMenuBar1.add(LogOut);

         setJMenuBar(jMenuBar1);

         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
         getContentPane().setLayout(layout);
         layout.setHorizontalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                 .addContainerGap(15, Short.MAX_VALUE)
                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel1)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addGroup(layout.createSequentialGroup()
                         .addComponent(jLabel2)
                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                         .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addGap(18, 18, 18)
                         .addComponent(jLabel3)
                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                         .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addGap(18, 18, 18)
                         .addComponent(get, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                 .addContainerGap())
             .addGroup(layout.createSequentialGroup()
                 .addGap(170, 170, 170)
                 .addComponent(Open)
                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
         layout.setVerticalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(layout.createSequentialGroup()
                 .addContainerGap()
                 .addComponent(jLabel1)
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel2)
                     .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel3)
                     .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(get))
                 .addGap(18, 18, 18)
                 .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                 .addComponent(Open)
                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
         Open.setEnabled(false);

         pack();
    }

    private void TicketMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_TicketMouseClicked
        showTicketScreen();
    }// GEN-LAST:event_TicketMouseClicked

    private void ClientMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_ClientActionPerformed
        showClients();
    }// GEN-LAST:event_ClientActionPerformed

    private void InvoiceMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_InvoiceActionPerformed
       showInvoice();
    }// GEN-LAST:event_InvoiceActionPerformed

    private void jMenuItem1MousePressed(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
    	new BonusReport();
    }// GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2MousePressed(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
        new CompanyReport();
    }// GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3MousePressed(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jMenuItem3ActionPerformed

    private void LogOutMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_LogOutActionPerformed
        this.dispose();
        Login frame = new Login();

        frame.setVisible(true);
    }// GEN-LAST:event_LogOutActionPerformed

    private void ClearActionPerformed(final java.awt.event.ActionEvent evt) {
        this.Search.setText("");
    }

    private void AddTicketActionPerformed(final java.awt.event.ActionEvent evt) {
        this.dispose();
        Ticket ticket = new Ticket();
        ticket.showAddScreen("Employee");
    }

    private void UpdateTicketActionPerformed(final java.awt.event.ActionEvent evt) {
        if (this.selctedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to Update", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            dispose();
            Ticket ticket = new Ticket();
            ticket.showUpdateScreen(HomePage.this.selctedRow, "Employee");
        }
    }

    private void DeleteTicketActionPerformed(final java.awt.event.ActionEvent evt) {
        if (this.selctedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            dispose();
            Ticket ticket = new Ticket();
            ticket.showDeleteScreen(HomePage.this.selctedRow);
        }
    }

    private void AddClientActionPerformed(final java.awt.event.ActionEvent evt) {
        this.dispose();
        Client client = new Client();
        client.showAddScreen("Employee");
    }

    private void UpdateClientActionPerformed(final java.awt.event.ActionEvent evt) {
        if (this.selctedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to Update", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            dispose();
            Client client = new Client();
            client.showUpdateScreen(HomePage.this.selctedRow, "Employee");
        }
    }

    private void DeleteClientActionPerformed(final java.awt.event.ActionEvent evt) {
        if (this.selctedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            dispose();
            Client client = new Client();
            client.showDeleteScreen(HomePage.this.selctedRow, "Employee");
        }
    }

    private void getActionPerformed(java.awt.event.ActionEvent evt,String from, String to) {                                    
    	boolean flag = true;
      	 SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
      	 try {

              formatter.parse(from);
             
            
              

           } catch (Exception e) {
               //e.printStackTrace();
               flag = false;
               JOptionPane.showMessageDialog(this, "Incorrect from date enter in MM/dd/yyyy format", "Error", JOptionPane.ERROR_MESSAGE);
           }
      	 
      	 try{
      		 if(flag)
      		 {
      			 formatter.parse(to);
      		 }
      		
      	 }
      	 catch (Exception e) {
      		//e.printStackTrace();
               flag = false;
               JOptionPane.showMessageDialog(this, "Incorrect to date enter in MM/dd/yyyy format", "Error", JOptionPane.ERROR_MESSAGE);
           }
       	
       	if(flag)
       	{
    	 data = new ReportsData().getInvoiceReportsData(from, to);
    	 String col[] = {"Invoice Id", "Client", "From", "To", "Cost"};
    	 tableModel = new MyDefaultTableModel(col, 0);
    	for(String temp[] : data)
    	{
    	tableModel.addRow(temp);
    	}
    	 HomePage.this.jTable1.setModel(HomePage.this.tableModel);
         HomePage.this.jTable1.repaint();
       	}
    } 
    
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {     
    	new showInvoice(data.get(selctedRow));
    }
    
    
    private javax.swing.JTextField fromDate;
    private javax.swing.JButton get;

    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;





    private javax.swing.JTextField toDate;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField Search;
    private javax.swing.JComboBox<String> SearchCombo;
    private javax.swing.JButton Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu Ticket;
    private javax.swing.JMenu Client;
    private javax.swing.JMenu Reports;
    private javax.swing.JMenu Invoice;
    private javax.swing.JMenu LogOut;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    //private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    MyDefaultTableModel tableModel;
    private javax.swing.JButton Open;
    // End of variables declaration//GEN-END:variables
}
